<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emgu.TF.Models</name>
    </assembly>
    <members>
        <member name="T:Emgu.TF.Models.ImageIO">
            <summary>
            Provide image IO functions
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.ImageIO.EncodeJpeg(Emgu.TF.Tensor,System.Single,System.Single)">
            <summary>
            Encode the tensor to JPEG image
            </summary>
            <param name="image">The image tensor. Should be a single channel or 3 channel 4-D tensor</param>
            <param name="scale">The tensor value will be scaled with this values first</param>
            <param name="inputMean">The mean value will be added back to the image after scaling is done</param>
            <returns>The jpeg data</returns>
        </member>
        <member name="M:Emgu.TF.Models.ImageIO.TensorToPixel(Emgu.TF.Tensor,System.Single,System.Single,System.Int32,Emgu.TF.Status)">
            <summary>
            Convert the tensor that contains pixels values to an array of bytes
            </summary>
            <param name="imageTensor">Image tensor. Only [1, height, width, 3] tensor input type is supported.</param>
            <param name="scale">The scale that will be used to multiple the pixel values</param>
            <param name="mean">The mean value that will be added back to the pixels</param>
            <param name="dstChannels">Can be 3 or 4. If 4 channels, the last channel is filled with 255</param>
            <param name="status">The status</param>
            <returns>The array of bytes that contains the pixel value of the tensor</returns>
        </member>
        <member name="M:Emgu.TF.Models.ImageIO.TensorToJpeg(Emgu.TF.Tensor,System.Single,System.Single,Emgu.TF.Status)">
            <summary>
            Encode the tensor to raw jpeg data
            </summary>
            <param name="image">The image tensor</param>
            <param name="scale">The scale used to multiply with the pixel values</param>
            <param name="mean">The mean value that will be added to the pixel values</param>
            <param name="status">Optional status</param>
            <returns>The raw jpeg data converted from the image tensor</returns>
        </member>
        <member name="M:Emgu.TF.Models.ImageIO.ReadTensorFromImageFile``1(System.String,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Read the image file into a Tensorflow tensor
            </summary>
            <typeparam name="T">The tensor data type, e.g. float</typeparam>
            <param name="fileName">The name of the image file</param>
            <param name="inputHeight">The height of the input tensor. If zero or negative, will use the image height from the file</param>
            <param name="inputWidth">The width of the input tensor. If zero or negative, will use the image width from the file</param>
            <param name="inputMean">The input mean, will be subtracted from the image pixel value</param>
            <param name="scale">The optional scale, after input means is substracted, the pixel value will multiply with the scale to produce the tensor value</param>
            <param name="flipUpSideDown">If true, the image will be flipped upside down</param>
            <param name="swapBR">If true, the blue and red channels will be swapped</param>
            <returns>The tensorflow tensor.</returns>
        </member>
        <member name="M:Emgu.TF.Models.ImageIO.ReadTensorFromImageFiles``1(System.String[],System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Read the image files into a Tensorflow tensor
            </summary>
            <typeparam name="T">The tensor data type, e.g. float</typeparam>
            <param name="fileNames">The name of the image files</param>
            <param name="inputHeight">The height of the input tensor. If zero or negative, will use the image height from the file</param>
            <param name="inputWidth">The width of the input tensor. If zero or negative, will use the image width from the file</param>
            <param name="inputMean">The input mean, will be subtracted from the image pixel value</param>
            <param name="scale">The optional scale, after input means is subtracted, the pixel value will multiply with the scale to produce the tensor value</param>
            <param name="flipUpSideDown">If true, the image will be flipped upside down</param>
            <param name="swapBR">If true, the blue and red channels will be swapped</param>
            <returns>The tensorflow tensor.</returns>
        </member>
        <member name="M:Emgu.TF.Models.ImageIO.NativeReadTensorFromImageFiles``1(System.String[],System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,Emgu.TF.Status)">
            <summary>
            Read image files, covert the data and save it to the native pointer
            </summary>
            <typeparam name="T">The type of the data to covert the image pixel values to. e.g. "float" or "byte"</typeparam>
            <param name="fileNames">The name of the image files</param>
            <param name="inputHeight">The height of the image, must match the height requirement for the tensor</param>
            <param name="inputWidth">The width of the image, must match the width requirement for the tensor</param>
            <param name="inputMean">The mean value, it will be subtracted from the input image pixel values</param>
            <param name="scale">The scale, after mean is subtracted, the scale will be used to multiply the pixel values</param>
            <param name="flipUpSideDown">If true, the image needs to be flipped up side down</param>
            <param name="swapBR">If true, will flip the Blue channel with the Red. e.g. If false, the tensor's color channel order will be RGB. If true, the tensor's color channle order will be BGR </param>
            <param name="status">Tensorflow status</param>
            <returns>The tensor that contains all the image files</returns>
        </member>
        <member name="T:Emgu.TF.Models.Inception">
            <summary>
            Inception image classification 
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Inception.#ctor(Emgu.TF.Status,Emgu.TF.SessionOptions)">
            <summary>
            Create a new inception object 
            </summary>
            <param name="status">The status object that can be used to keep track of error or exceptions</param>
            <param name="sessionOptions">The options for running the tensorflow session.</param>
        </member>
        <member name="E:Emgu.TF.Models.Inception.OnDownloadProgressChanged">
            <summary>
            Callback when model download progress is changed.
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Inception.Init(Emgu.Models.DownloadableFile,Emgu.Models.DownloadableFile,System.String,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFile">The tensorflow graph.</param>
            <param name="labelFile">the object class labels.</param>
            <param name="inputName">The input operation name. Default to "input" if not specified.</param>
            <param name="outputName">The output operation name. Default to "output" if not specified.</param>
        </member>
        <member name="M:Emgu.TF.Models.Inception.Init(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFiles">An array where the first file is the tensorflow graph and the second file is the object class labels. </param>
            <param name="downloadUrl">The url where the file can be downloaded</param>
            <param name="inputName">The input operation name. Default to "input" if not specified.</param>
            <param name="outputName">The output operation name. Default to "output" if not specified.</param>
            <param name="localModelFolder">The local folder to store the model</param>
        </member>
        <member name="P:Emgu.TF.Models.Inception.Imported">
            <summary>
            Return true if the graph has been imported.
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.Inception.Graph">
            <summary>
            Get the TF graph from this inception model
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.Inception.Labels">
            <summary>
            Get the labels of the object classes
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.Inception.Session">
            <summary>
            Get the Tensorflow session
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Inception.Recognize(Emgu.TF.Tensor)">
            <summary>
            Pass the image tensor to the graph and return the probability that the object in image belongs to each of the object class.
            </summary>
            <param name="imageTensor">The tensor that contains the images to be classified</param>
            <returns>The object classes, sorted by probability from high to low</returns>
        </member>
        <member name="M:Emgu.TF.Models.Inception.SortResults(System.Single[])">
            <summary>
            Sort the result from the most likely to the less likely
            </summary>
            <param name="probabilities">The probability for the classes, this should be the values of the output tensor</param>
            <returns>The recognition result, sorted by likelihood.</returns>
        </member>
        <member name="T:Emgu.TF.Models.Inception.RecognitionResult">
            <summary>
            The result of the class labeling
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Inception.RecognitionResult.#ctor(System.String,System.Double)">
            <summary>
            Create a recognition result by providing the label and the probability
            </summary>
            <param name="label">The label</param>
            <param name="probability">The probability</param>
        </member>
        <member name="F:Emgu.TF.Models.Inception.RecognitionResult.Label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.Inception.RecognitionResult.Probability">
            <summary>
            The probability
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Inception.DisposeObject">
            <summary>
            Release the memory associated with this inception graph
            </summary>
        </member>
        <member name="T:Emgu.TF.Models.MaskRcnnInceptionV2Coco">
            <summary>
            Mask Rcnn Inception image classification 
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MaskRcnnInceptionV2Coco.#ctor(Emgu.TF.Status,Emgu.TF.SessionOptions)">
            <summary>
            Create a new mask rcnn inception object 
            </summary>
            <param name="status">The status object that can be used to keep track of error or exceptions</param>
            <param name="sessionOptions">The options for running the tensorflow session.</param>
        </member>
        <member name="E:Emgu.TF.Models.MaskRcnnInceptionV2Coco.OnDownloadProgressChanged">
            <summary>
            Callback when model download progress is changed.
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MaskRcnnInceptionV2Coco.Init(Emgu.Models.DownloadableFile,Emgu.Models.DownloadableFile)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFile">The tensorflow graph.</param>
            <param name="labelFile">the object class labels.</param>
        </member>
        <member name="M:Emgu.TF.Models.MaskRcnnInceptionV2Coco.Init(System.String[],System.String,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFiles">An array where the first file is the tensorflow graph and the second file is the object class labels. </param>
            <param name="downloadUrl">The url where the file can be downloaded</param>
            <param name="localModelFolder">The local folder to store the model</param>
        </member>
        <member name="P:Emgu.TF.Models.MaskRcnnInceptionV2Coco.Imported">
            <summary>
            Return true if the model has been imported
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.MaskRcnnInceptionV2Coco.Graph">
            <summary>
            Get the TF graph from this mask rcnn inception model
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.MaskRcnnInceptionV2Coco.Labels">
            <summary>
            Get the labels of the Coco dataset.
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MaskRcnnInceptionV2Coco.Recognize(Emgu.TF.Tensor)">
            <summary>
            Recognized the objects from the tensor.
            </summary>
            <param name="image">The image tensor</param>
            <returns>The recognition result.</returns>
        </member>
        <member name="T:Emgu.TF.Models.MaskRcnnInceptionV2Coco.RecognitionResult">
            <summary>
            The recognition result 
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MaskRcnnInceptionV2Coco.RecognitionResult.Class">
            <summary>
            The class number
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MaskRcnnInceptionV2Coco.RecognitionResult.Label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MaskRcnnInceptionV2Coco.RecognitionResult.Probability">
            <summary>
            The probability
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MaskRcnnInceptionV2Coco.RecognitionResult.Region">
            <summary>
            The region
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MaskRcnnInceptionV2Coco.RecognitionResult.Mask">
            <summary>
            The mask
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MaskRcnnInceptionV2Coco.DisposeObject">
            <summary>
            Release the memory associated with the Mask rcnn inception model
            </summary>
        </member>
        <member name="T:Emgu.TF.Models.MultiboxGraph">
            <summary>
            Multibox graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.#ctor(Emgu.TF.Status,Emgu.TF.SessionOptions)">
            <summary>
            Create a new multibox graph  
            </summary>
            <param name="status">The status object that can be used to keep track of error or exceptions</param>
            <param name="sessionOptions">The options for running the tensorflow session.</param>
        </member>
        <member name="E:Emgu.TF.Models.MultiboxGraph.OnDownloadProgressChanged">
            <summary>
            Callback when the model download progress is changed.
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.Init(System.String[],System.String,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFiles">An array where the first file is the tensorflow graph and the second file is the object class labels. </param>
            <param name="downloadUrl">The url where the file can be downloaded</param>
            <param name="localModelFolder">The local folder to store the model</param>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.Init(Emgu.Models.DownloadableFile,Emgu.Models.DownloadableFile,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFile">The tensorflow graph.</param>
            <param name="labelFile">the object class labels.</param>
            <param name="localModelFolder">The local folder to store the model</param>
        </member>
        <member name="P:Emgu.TF.Models.MultiboxGraph.Imported">
            <summary>
            Return true if the graph has been imported
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.Detect(Emgu.TF.Tensor)">
            <summary>
            Detect objects from the image.
            </summary>
            <param name="image">The image tensor.</param>
            <returns>The detection result</returns>
        </member>
        <member name="T:Emgu.TF.Models.MultiboxGraph.Result">
            <summary>
            A detection result;
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MultiboxGraph.Result.Scores">
            <summary>
            The score for the detection
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.MultiboxGraph.Result.DecodedLocations">
            <summary>
            The location for the detection
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.ReadBoxPriors(System.String)">
            <summary>
            Read the box priors
            </summary>
            <param name="fileName">The name of the box priors file</param>
            <returns>The floating point box priors value</returns>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.DecodeLocationsEncoding(System.Single[],System.Single[])">
            <summary>
            Decode the location encoding
            </summary>
            <param name="locationEncoding">The location encoding</param>
            <param name="boxPriors">The box priors</param>
            <returns>The list of locations, each location is 4 floating value.</returns>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.DecodeScoresEncoding(System.Single[])">
            <summary>
            Decode the scores
            </summary>
            <param name="scoresEncoding">The scores encoding</param>
            <returns>The scores</returns>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.FilterResults(Emgu.TF.Models.MultiboxGraph.Result[],System.Single)">
            <summary>
            Convert and filter the multibox results to annotations
            </summary>
            <param name="results">Multibox detection result</param>
            <param name="scoreThreshold">The score threshold</param>
            <returns>The Annotation to be drawn.</returns>
        </member>
        <member name="M:Emgu.TF.Models.MultiboxGraph.DisposeObject">
            <summary>
            Release the memory associated with the Multibox
            </summary>
        </member>
        <member name="T:Emgu.TF.Models.Resnet">
            <summary>
            Resnet image recognition model
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.Resnet.Graph">
            <summary>
            Get the TF graph from the resnet model
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.Resnet.Imported">
            <summary>
            Return true if the graph has been imported
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.Resnet.MetaGraphDefBuffer">
            <summary>
            Get the MetaGraphDefBuffer
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.#ctor(Emgu.TF.Status,Emgu.TF.SessionOptions)">
            <summary>
            Create a new inception object 
            </summary>
            <param name="status">The status object that can be used to keep track of error or exceptions</param>
            <param name="sessionOptions">The options for running the tensorflow session.</param>
        </member>
        <member name="E:Emgu.TF.Models.Resnet.OnDownloadProgressChanged">
            <summary>
            Callback when the model download progress is changed.
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.Init(Emgu.Models.DownloadableFile,Emgu.Models.DownloadableFile,System.String,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFile">The tensorflow graph.</param>
            <param name="labelFile">the object class labels.</param>
            <param name="inputName">The name of the input tensor</param>
            <param name="outputName">The name of the output tensor</param>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.Init(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFiles">An array where the first file is the tensorflow graph and the second file are the object class labels. </param>
            <param name="downloadUrl">The url where the file can be downloaded</param>
            <param name="inputName">The input operation name. Default to "input" if not specified.</param>
            <param name="outputName">The output operation name. Default to "output" if not specified.</param>
            <param name="localModelFolder">The local folder to store the model</param>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.Recognize(Emgu.TF.Tensor)">
            <summary>
            Pass the image tensor to the graph and return the probability that the object in image belongs to each of the object class.
            </summary>
            <param name="imageTensor">The tensor that contains the images to be classified</param>
            <returns>The object classes, sorted by probability from high to low</returns>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.SortResults(System.Single[])">
            <summary>
            Sort the result from the most likely to the less likely
            </summary>
            <param name="probabilities">The probability for the classes, this should be the values of the output tensor</param>
            <returns>The recognition result, sorted by likelihood.</returns>
        </member>
        <member name="T:Emgu.TF.Models.Resnet.RecognitionResult">
            <summary>
            The result of the class labeling
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.RecognitionResult.#ctor(System.String,System.Double)">
            <summary>
            Create a recognition result by providing the label and the probability
            </summary>
            <param name="label">The label</param>
            <param name="probability">The probability</param>
        </member>
        <member name="F:Emgu.TF.Models.Resnet.RecognitionResult.Label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Emgu.TF.Models.Resnet.RecognitionResult.Probability">
            <summary>
            The probability
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.Resnet.DisposeObject">
            <summary>
            Release the memory associated with the Resnet
            </summary>
        </member>
        <member name="P:Emgu.TF.Models.StylizeGraph.Imported">
            <summary>
            Return true if the graph has been imported
            </summary>
        </member>
        <member name="M:Emgu.TF.Models.StylizeGraph.Init(Emgu.Models.DownloadableFile)">
            <summary>
            Initiate the graph by checking if the model file exist locally, if not download the graph from internet.
            </summary>
            <param name="modelFile">The tensorflow graph.</param>
        </member>
        <member name="M:Emgu.TF.Models.StylizeGraph.DisposeObject">
            <summary>
            Release the memory associated with this inception graph
            </summary>
        </member>
        <member name="T:Emgu.Models.Annotation">
            <summary>
            Image annotation
            </summary>
        </member>
        <member name="F:Emgu.Models.Annotation.Rectangle">
            <summary>
            The coordinates of the rectangle, the values are in the range of [0, 1], each rectangle contains 4 values, corresponding to the top left corner (x0, y0) and bottom right corner (x1, y1)
            </summary>
        </member>
        <member name="F:Emgu.Models.Annotation.Label">
            <summary>
            The text to be drawn on the top left corner of the Rectangle
            </summary>
        </member>
        <member name="T:Emgu.Models.DownloadableFile">
            <summary>
            This represent a file that can be downloaded from the internet
            </summary>
        </member>
        <member name="M:Emgu.Models.DownloadableFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a downloadable file from the url
            </summary>
            <param name="url">The url where the file can be downloaded from</param>
            <param name="localSubfolder">The sub-folder to store the model</param>
            <param name="sha256Hash">The SHA256 has for the file.</param>
        </member>
        <member name="P:Emgu.Models.DownloadableFile.Url">
            <summary>
            The url where this file can be downloaded from
            </summary>
        </member>
        <member name="P:Emgu.Models.DownloadableFile.IsLocalFileValid">
            <summary>
            Return true if the local file exist and match the sha256hash (if specified in the constructor).
            </summary>
        </member>
        <member name="P:Emgu.Models.DownloadableFile.LocalFile">
            <summary>
            The local file name
            </summary>
        </member>
        <member name="P:Emgu.Models.DownloadableFile.LocalFolder">
            <summary>
            Return the directory where the local file is
            </summary>
        </member>
        <member name="M:Emgu.Models.DownloadableFile.GetLocalFileName(System.String)">
            <summary>
            The local path to the local file given the file name
            </summary>
            <param name="fileName">The name of the file</param>
            <returns>The local path of the file</returns>
        </member>
        <member name="T:Emgu.Models.FileDownloadManager">
            <summary>
            Use to download files (e.g. models) from the internet
            </summary>
        </member>
        <member name="M:Emgu.Models.FileDownloadManager.#ctor">
            <summary>
            Create a file download manager
            </summary>
        </member>
        <member name="E:Emgu.Models.FileDownloadManager.OnDownloadProgressChanged">
            <summary>
            This event will be fired when the download progress is changed
            </summary>
        </member>
        <member name="M:Emgu.Models.FileDownloadManager.Clear">
            <summary>
            Clear the list of files
            </summary>
        </member>
        <member name="M:Emgu.Models.FileDownloadManager.AddFile(System.String,System.String,System.String)">
            <summary>
            Add a file to download
            </summary>
            <param name="url">The url of the file to be downloaded</param>
            <param name="localSubfolder">The local subfolder name to download the model to.</param>
            <param name="sha256Hash">The sha256 hash value for the file</param>
        </member>
        <member name="M:Emgu.Models.FileDownloadManager.AddFile(Emgu.Models.DownloadableFile)">
            <summary>
            Add a file to download
            </summary>
            <param name="downloadableFile">The file to be downloaded</param>
        </member>
        <member name="P:Emgu.Models.FileDownloadManager.AllFilesDownloaded">
            <summary>
            Return true if all files has been downloaded.
            </summary>
        </member>
        <member name="P:Emgu.Models.FileDownloadManager.Files">
            <summary>
            Get the files that will be downloaded by this download manager.
            </summary>
        </member>
        <member name="M:Emgu.Models.FileDownloadManager.Download(System.Int32)">
            <summary>
            Download the files. 
            </summary>
            <param name="retry">The number of retries.</param>
            <returns>The async Task</returns>
        </member>
        <member name="T:Emgu.Models.JpegData">
            <summary>
            The Jpeg Data
            </summary>
        </member>
        <member name="P:Emgu.Models.JpegData.Width">
            <summary>
            The width of the image
            </summary>
        </member>
        <member name="P:Emgu.Models.JpegData.Height">
            <summary>
            The height of the image
            </summary>
        </member>
        <member name="P:Emgu.Models.JpegData.Raw">
            <summary>
            The raw jpeg data
            </summary>
        </member>
        <member name="T:Emgu.Models.NativeImageIO">
            <summary>
            Platform specific implementation of Image IO
            </summary>
            <summary>
            Platform specific implementation of Image IO
            </summary>
        </member>
        <member name="M:Emgu.Models.NativeImageIO.ReadBitmapToTensor``1(System.Drawing.Bitmap,System.IntPtr,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Covert the Bitmap data and save it to the native pointer
            </summary>
            <typeparam name="T">The type of the data to covert the image pixel values to. e.g. "float" or "byte"</typeparam>
            <param name="bmp">The Bitmap to convert to tensor</param>
            <param name="dest">The native pointer where the image pixels values will be saved to.</param>
            <param name="inputHeight">The height of the image, must match the height requirement for the tensor</param>
            <param name="inputWidth">The width of the image, must match the width requirement for the tensor</param>
            <param name="inputMean">The mean value, it will be subtracted from the input image pixel values</param>
            <param name="scale">The scale, after mean is subtracted, the scale will be used to multiply the pixel values</param>
            <param name="flipUpSideDown">If true, the image needs to be flipped up side down</param>
            <param name="swapBR">If true, will flip the Blue channel with the Red. e.g. If false, the tensor's color channel order will be RGB. If true, the tensor's color channle order will be BGR </param>
        </member>
        <member name="M:Emgu.Models.NativeImageIO.ReadImageFilesToTensor``1(System.String[],System.IntPtr,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Read image files, covert the data and save it to the native pointer
            </summary>
            <typeparam name="T">The type of the data to covert the image pixel values to. e.g. "float" or "byte"</typeparam>
            <param name="fileNames">The name of the image files</param>
            <param name="dest">The native pointer where the image pixels values will be saved to.</param>
            <param name="inputHeight">The height of the image, must match the height requirement for the tensor</param>
            <param name="inputWidth">The width of the image, must match the width requirement for the tensor</param>
            <param name="inputMean">The mean value, it will be subtracted from the input image pixel values</param>
            <param name="scale">The scale, after mean is subtracted, the scale will be used to multiply the pixel values</param>
            <param name="flipUpSideDown">If true, the image needs to be flipped up side down</param>
            <param name="swapBR">If true, will flip the Blue channel with the Red. e.g. If false, the tensor's color channel order will be RGB. If true, the tensor's color channle order will be BGR </param>
        </member>
        <member name="M:Emgu.Models.NativeImageIO.ReadImageFileToTensor``1(System.String,System.IntPtr,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Read an image file, covert the data and save it to the native pointer
            </summary>
            <typeparam name="T">The type of the data to covert the image pixel values to. e.g. "float" or "byte"</typeparam>
            <param name="fileName">The name of the image file</param>
            <param name="dest">The native pointer where the image pixels values will be saved to.</param>
            <param name="inputHeight">The height of the image, must match the height requirement for the tensor</param>
            <param name="inputWidth">The width of the image, must match the width requirement for the tensor</param>
            <param name="inputMean">The mean value, it will be subtracted from the input image pixel values</param>
            <param name="scale">The scale, after mean is subtracted, the scale will be used to multiply the pixel values</param>
            <param name="flipUpSideDown">If true, the image needs to be flipped up side down</param>
            <param name="swapBR">If true, will flip the Blue channel with the Red. e.g. If false, the tensor's color channel order will be RGB. If true, the tensor's color channle order will be BGR </param>
        </member>
        <member name="M:Emgu.Models.NativeImageIO.PixelToJpeg(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Converting raw pixel data to jpeg stream
            </summary>
            <param name="rawPixel">The raw pixel data</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image</param>
            <param name="channels">The number of channels</param>
            <returns>The jpeg stream</returns>
        </member>
        <member name="M:Emgu.Models.NativeImageIO.ImageFileToJpeg(System.String,Emgu.Models.Annotation[])">
            <summary>
            Read the file and draw rectangles on it.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="annotations">Annotations to be add to the image. Can consist of rectangles and labels</param>
            <returns>The image in Jpeg stream format</returns>
        </member>
    </members>
</doc>
